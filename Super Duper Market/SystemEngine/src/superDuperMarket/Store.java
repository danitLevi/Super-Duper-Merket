//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.08.09 at 11:30:54 AM IDT 
//


package superDuperMarket;

import DtoObjects.ItemInStoreDto;
import DtoObjects.SaleDto;
import DtoObjects.StoreDto;
import Exceptions.ItemAlreadyExistInStoreException;
import Exceptions.StoreItemNotFoundInSystemException;
import Exceptions.ValueOutOfRangeException;
import generatedClassesJaxb.SDMDiscount;
import generatedClassesJaxb.SDMDiscounts;
import generatedClassesJaxb.SDMSell;
import generatedClassesJaxb.SDMStore;
import logic.Owner;

import java.io.Serializable;
import java.util.*;
public class Store implements Serializable {

    private String name;
    private int deliveryPpk;
    private Coordinate location;
    private int id;
    private Map<Integer, Sell> itemIdToItemSell;
    Set<Integer> orderIds;
    Set<Sale> sales;

    Owner storeOwner;

    public Store(SDMStore sdmStore, final Map<Integer,Item> itemIDToItemInSystem,Owner storeOwner) throws StoreItemNotFoundInSystemException, ItemAlreadyExistInStoreException, ValueOutOfRangeException {
        setId(sdmStore.getId());
        setName(sdmStore.getName());
        setDeliveryPpk(sdmStore.getDeliveryPpk());
        setStoreOwner(storeOwner);

        try
        {
            this.location=new Coordinate(sdmStore.getLocation());
        }
        catch (ValueOutOfRangeException e)
        {
            throw new ValueOutOfRangeException(e.getMinValue() ,e.getMaxValue(),e.getVariableName() ,"the store "+sdmStore.getName());
        }

        this.itemIdToItemSell =new HashMap<>();
        InitializePrices(sdmStore.getSDMPrices().getSDMSell(),itemIDToItemInSystem);
        this.orderIds =new HashSet<>();
        this.sales=new HashSet<>();
        initializeSales(sdmStore.getSDMDiscounts());
    }

    public Owner getStoreOwner() {
        return storeOwner;
    }

    public void setStoreOwner(Owner storeOwner) {
        this.storeOwner = storeOwner;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the deliveryPpk property.
     * 
     */
    public int getDeliveryPpk() {
        return deliveryPpk;
    }

    /**
     * Sets the value of the deliveryPpk property.
     * 
     */
    public void setDeliveryPpk(int value) {
        this.deliveryPpk = value;
    }

    /**
     * Gets the value of the location property.
     * 
     * @return
     *     possible object is
     *     {@link Coordinate }
     *     
     */
    public Coordinate getLocation() {
        return location;
    }


    /**
     * Gets the value of the id property.
     * 
     */
    public int getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     */
    public void setId(int value) {
        this.id = value;
    }

    public void setLocation(Coordinate location) {
        this.location = location;
    }


    public Map<Integer, Sell> getItemIdToItemSell() {
        return itemIdToItemSell;
    }

    public void setItemIdToItemSell(Map<Integer, Sell> itemIdToItemSell) {
        this.itemIdToItemSell = itemIdToItemSell;
    }

    public Set<Integer> getOrderIds() {
        return orderIds;
    }

    public void setOrderIds(Set<Integer> orderIds) {
        this.orderIds = orderIds;
    }

    public void InitializePrices(List<SDMSell> otherPrices, final Map<Integer,Item> itemIdToItemInSystem) throws StoreItemNotFoundInSystemException, ItemAlreadyExistInStoreException {
        int currItemId;
        for (SDMSell currSell:otherPrices )
        {
            currItemId= currSell.getItemId();
            if(!itemIdToItemInSystem.containsKey(currItemId))
            {
                throw new StoreItemNotFoundInSystemException(currItemId ,this.name);
            }
            if(itemIdToItemSell.containsKey(currItemId))
            {
                throw new ItemAlreadyExistInStoreException(currItemId,name);
            }
            Item currItem=itemIdToItemInSystem.get(currItemId);
            currItem.increaseSellersNumByOne();
            itemIdToItemSell.put(currItemId,new Sell(currSell,currItem.getPurchaseCategory()));

        }
    }

    public void initializeSales(SDMDiscounts sdmSales)
    {
        if(sdmSales!=null)
        {
            List<SDMDiscount> salesList=sdmSales.getSDMDiscount();
            for (SDMDiscount currSDMDiscount: salesList)
            {
                this.sales.add(new Sale(currSDMDiscount));
            }
        }
    }

    public StoreDto getStoreDetails(Set<Item> storeItems,double deliveriesProfit,Set<StoreOrder> storeOrders)
    {
        Set<ItemInStoreDto> itemsInStoreDetails=getStoreItemsDetails(storeItems,storeOrders);
        return new StoreDto(id,name,deliveryPpk,deliveriesProfit,this.location.getX(),this.location.getY(),itemsInStoreDetails,orderIds.size(),getSalesData());

    }

    public double getDeliveryPrice(Coordinate otherLocation)
    {
        double distance= getDistanceFromGivenLocation(otherLocation);

        return (distance*getDeliveryPpk());
    }

    public double getDistanceFromGivenLocation(Coordinate otherLocation)
    {

        int x1=location.getX();
        int y1=location.getY();

        int x2=otherLocation.getX();
        int y2=otherLocation.getY();

        double distance=Math.sqrt( Math.pow((x1-x2),2) + Math.pow((y1-y2),2) );

        return  distance;
    }

    public Set<ItemInStoreDto> getStoreItemsDetails(Set<Item> storeItems ,Set<StoreOrder> storeOrders)
    {
        Set<ItemInStoreDto> itemsInStoreDetails=new HashSet<>();
        ItemInStoreDto currItemDetails;
        for (Item currItem : storeItems)
        {
            currItemDetails=new ItemInStoreDto(currItem.getId() ,
                    currItem.getName() ,
                    currItem.getPurchaseCategory() ,
                    itemIdToItemSell.get(currItem.getId()).getPrice(),
                    getAmountOfItemPurchasesInStore(currItem.getId() ,storeOrders));

            itemsInStoreDetails.add(currItemDetails);

        }
        return itemsInStoreDetails;
    }

    public Set<SaleDto> getSalesData() {
        Set<SaleDto> salesDetails=new HashSet<>();
        SaleDto currSaleDetails;
//        List<OfferDto> currSaleOffersDetail;
//        List<SalesOffer> currSaleOffers;
        for (Sale currSale:this.sales)
        {
//            currSaleOffersDetail=new ArrayList<>();
//            currSaleOffers=currSale.getThenYouGet().getOffers();
//            for (SalesOffer currOffer:currSaleOffers )
//            {
//                OfferDto currOferDetails=new OfferDto(currOffer.getQuantity(),currOffer.getItemId(),currOffer.getForAdditional());
//                currSaleOffersDetail.add(currOferDetails);
//            }
//            currSaleDetails=new SaleDto(currSale.getName(),currSale.getIfYouBuy().getQuantity(),currSale.getIfYouBuy().getItemId(),currSaleOffersDetail,currSale.getThenYouGet().getOperator());
            currSaleDetails=currSale.getSaleDetails();
            salesDetails.add(currSaleDetails);
        }

        return salesDetails;
    }



    public double getAmountOfItemPurchasesInStore(int itemId, Set<StoreOrder> storeOrders)
    {
        double amoutPurchasedInStore=0;
        for (StoreOrder currStoreOrder: storeOrders)
        {
            amoutPurchasedInStore+=currStoreOrder.getOrderedItemPurchases(itemId);
        }
        return  amoutPurchasedInStore;
    }


    public boolean isItemIdExist(int itemId)
    {
        return (itemIdToItemSell.containsKey(itemId));
    }

    public void deleteItem(int itemToDeleteId)
    {
        itemIdToItemSell.remove(itemToDeleteId);
        deleteSalesOfItem(itemToDeleteId);
    }

    public void deleteSalesOfItem(int itemId)
    {
        for (Sale currSale : sales)
        {
            if(currSale.isItemInSale(itemId))
            {
                this.sales.remove(currSale);
            }
        }
    }

    public boolean isItemInSale(int itemId)
    {
        for (Sale currSale : sales)
        {
            if(currSale.isItemInSale(itemId))
            {
                return true;
            }
        }
        return false;
    }
    public void addItem(int itemId,double itemPrice )
    {
        Sell newSell=new Sell(itemPrice,itemId);
        itemIdToItemSell.put(itemId,newSell);
    }

    public void UpdateItemPrice(int itemId,double itemPrice)
    {
        Sell currSell=itemIdToItemSell.get(itemId) ;
        currSell.setPrice(itemPrice);
    }

    public double getItemPrice(int itemId)
    {
        return itemIdToItemSell.get(itemId).getPrice();
    }

    public Set<Integer> getItemsIds()
    {
        return itemIdToItemSell.keySet();
    }

    public void addStoreOrder(int orderId)
    {
        orderIds.add(orderId);
    }

    public Set<Sale> getSales() {
        return sales;
    }

    public void setSales(Set<Sale> sales) {
        this.sales = sales;
    }

    boolean isItemInStore(int itemId)
    {
        return itemIdToItemSell.containsKey(itemId);
    }

    public Map<SaleDto,Integer> getSalesInOrderDetails (Map<Integer,Double> orderedItemIdToItemAmount)
    {
        Map<SaleDto,Integer> saleDetailsToSaleAmount=new HashMap<>();
        SaleDto currSaleDetails;
        for (Sale currSale:sales)
        {
            int itemIdToBuy=currSale.getIfYouBuy().getItemId();
            double amountToBuy=currSale.getIfYouBuy().getQuantity();
            if(orderedItemIdToItemAmount.containsKey(itemIdToBuy) && amountToBuy<=orderedItemIdToItemAmount.get(itemIdToBuy))
            {
                int saleToUseAmount= (int) Math.floor(orderedItemIdToItemAmount.get(itemIdToBuy) /amountToBuy );
                currSaleDetails=currSale.getSaleDetails();
                saleDetailsToSaleAmount.put(currSaleDetails,saleToUseAmount);
            }
        }
        return saleDetailsToSaleAmount;

    }

    public double getWantedItemsTotalPrice(Map<Integer,Double> wantedItemIdToItemAmount)
    {
        double totalPrice=0;
        for (Integer currItemId:wantedItemIdToItemAmount.keySet())
        {
            double currSingleItemPrice=itemIdToItemSell.get(currItemId).getPrice();
            double currItemAmount=wantedItemIdToItemAmount.get(currItemId);
            totalPrice+=currSingleItemPrice*currItemAmount;
        }
        return totalPrice;
    }
}
