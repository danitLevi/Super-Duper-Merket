//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.08.09 at 11:30:54 AM IDT 
//
package superDuperMarket;

import DtoObjects.*;
import Exceptions.*;
import generatedClassesJaxb.SDMItem;
import generatedClassesJaxb.SDMStore;
import generatedClassesJaxb.SuperDuperMarketDescriptor;
import logic.Customer;
import logic.Owner;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import java.io.*;
import java.time.LocalDate;
import java.util.*;

//import jaxb.generated.SDMItem;
//import jaxb.generated.SDMStore;
//import jaxb.generated.SuperDuperMarketDescriptor;

public class Region implements RegionInterface {

    private Map<Integer, Item> itemIdToItems;
    private Map<Integer, Store> storeIdToStore;
    private  Map<Integer,Order> orderIdToOrder;
    private String regionName;
    private Owner regionOwner;

//    private Map<Integer,User> userIdToUser; // todo: to separate to customers and store owners ??
//    Set<Region> regions;

    public Region(SuperDuperMarketDescriptor jaxbSuperDuperMarket, Owner owner) throws DoubleObjectIdInSystemException, StoreItemNotFoundInSystemException, ItemNotFoundInStoresException, ValueOutOfRangeException, ItemAlreadyExistInStoreException, DoubleObjectInCoordinateException, ItemInSaleNotFoundInStoreException {

        this.regionName=jaxbSuperDuperMarket.getSDMZone().getName();
        this.regionOwner=owner;

        this.itemIdToItems = new HashMap<>();
        InitializeItems(jaxbSuperDuperMarket.getSDMItems().getSDMItem());

        this.storeIdToStore = new HashMap<>();
        InitializeStores(jaxbSuperDuperMarket.getSDMStores().getSDMStore());

        NotifyIfNotAllItemsInStores();

        this.orderIdToOrder = new HashMap<>();
//        Order.setNextId(0);
    }

//    public SuperDuperMarket()
//    {
//        itemIdToItems=new HashMap<>();
//        storeIdToStore=new HashMap<>();
//        orderIdToOrder=new HashMap<>();
//        userIdToUser=new HashMap<>();
//        regions=new HashSet<>();
//    }


//    public SDMRegion() {
//        this.itemIdToItems=new HashMap<>();
//        this.storeIdToStore=new HashMap<>();
//        this.orderIdToOrder=new HashMap<>();
////        this.userIdToUser=new HashMap<>();
////        this.regions=new HashSet<>();
//    }

//    public SDMRegion(sdmRegionInterface otherSdmRegionInterface) {
//        SDMRegion otherSDM = (SDMRegion) otherSdmRegionInterface;
//        this.itemIdToItems=otherSDM.itemIdToItems;
//        this.storeIdToStore=otherSDM.storeIdToStore;
//        this.orderIdToOrder=otherSDM.orderIdToOrder;
////        this.userIdToUser=otherSDM.userIdToUser;
////        this.regions=otherSDM.regions;
//    }


    public Map<Integer, Item> getItemIdToItems() {
        return itemIdToItems;
    }

    public void setItemIdToItems(Map<Integer, Item> itemIdToItems) {
        this.itemIdToItems = itemIdToItems;
    }

    public Map<Integer, Store> getStoreIdToStore() {
        return storeIdToStore;
    }

    public void setStoreIdToStore(Map<Integer, Store> storeIdToStore) {
        this.storeIdToStore = storeIdToStore;
    }

//
//    public  void LoadItems(List<SDMItem> otherItems) throws DoubleObjectIdInSystemException {
//      // Map<Integer,Item> newItemIdToItem=new HashMap<>();
//        int currId;
//        for (SDMItem item : otherItems) {
//            Item myItem = new Item(item);
//            currId = myItem.getId();
//            if (itemIdToItems.containsKey(currId)) {
//                throw new DoubleObjectIdInSystemException("items", currId);
//            }
//            itemIdToItems.put(currId, myItem);
//        }
//       // return newItemIdToItem;
//    }
//
//    public void LoadStores(List<SDMStore> otherStores) throws DoubleObjectIdInSystemException, StoreItemNotFoundInSystemException, ItemAlreadyExistInStoreException, ValueOutOfRangeException, DoubleObjectInCoordinateException, ItemInSaleNotFoundInStoreException, ItemNotFoundInStoresException {
////        Map<Integer,Store> newStoreIdToStore=new HashMap<>();
////        newStoreIdToStore.putAll(storeIdToStore);
//        int currId;
//        for (SDMStore store : otherStores) {
//            Store myStore = new Store(store, itemIdToItems);
//
//            currId = myStore.getId();
//            if ( storeIdToStore.containsKey(currId)) {
//                throw new DoubleObjectIdInSystemException("stores", currId);
//            }
//
//            Coordinate storeLocation=myStore.getLocation();
////
////            for (Store currStore:storeIdToStore.values()){
////                if(currStore.getLocation().equals(storeLocation))
////                {
////                    throw new DoubleObjectInCoordinateException("store "+currStore.getName(),
////                            "store "+myStore.getName(),
////                            storeLocation);
////                }
////            }
//
//            for (Store currStore:storeIdToStore.values()){
//                if(currStore.getLocation().equals(storeLocation))
//                {
//                    throw new DoubleObjectInCoordinateException("store "+currStore.getName(),
//                            "store "+myStore.getName(),
//                            storeLocation);
//                }
//            }
//
//            notifyInvalidStoreSale(myStore);
//            storeIdToStore.put(myStore.getId(), myStore);
//        }
//      //  return newStoreIdToStore;
//
//    }

//
    public void InitializeItems(List<SDMItem> otherItems) throws DoubleObjectIdInSystemException {
        int currId;
        for (SDMItem item : otherItems) {
            Item myItem = new Item(item);
            currId = myItem.getId();
            if (itemIdToItems.containsKey(currId)) {
                throw new DoubleObjectIdInSystemException("items", currId);
            }
            this.itemIdToItems.put(currId, myItem);
        }
    }

    public void InitializeStores(List<SDMStore> otherStores) throws DoubleObjectIdInSystemException, StoreItemNotFoundInSystemException, ItemAlreadyExistInStoreException, ValueOutOfRangeException, DoubleObjectInCoordinateException, ItemInSaleNotFoundInStoreException {
        int currId;
        for (SDMStore store : otherStores) {
            Store myStore = new Store(store, itemIdToItems,this.regionOwner);

            currId = myStore.getId();
            if (storeIdToStore.containsKey(currId)) {
                throw new DoubleObjectIdInSystemException("stores", currId);
            }

            Coordinate storeLocation=myStore.getLocation();

            for (Store currStore:storeIdToStore.values()){
                if(currStore.getLocation().equals(storeLocation))
                {
                    throw new DoubleObjectInCoordinateException("store "+currStore.getName(),
                            "store "+myStore.getName(),
                            storeLocation);
                }

            }

            notifyInvalidStoreSale(myStore);
            this.storeIdToStore.put(myStore.getId(), myStore);
        }

    }

    public void notifyInvalidStoreSale(Store store) throws StoreItemNotFoundInSystemException, ItemInSaleNotFoundInStoreException {
        int ifYouBuyItemId;
        int offerItemId;
        List<SalesOffer> offers;

        for (Sale currSale: store.getSales())
        {
            ifYouBuyItemId=currSale.getIfYouBuy().getItemId();
            checkItemInSale(ifYouBuyItemId,store);

            offers=currSale.getThenYouGet().getOffers();
            for (SalesOffer currOffer: offers)
            {
                offerItemId=currOffer.getItemId();
                checkItemInSale(offerItemId,store);
            }
        }
    }

    private void checkItemInSale(int itemId,Store store) throws StoreItemNotFoundInSystemException, ItemInSaleNotFoundInStoreException {
        if(!itemIdToItems.containsKey(itemId))
        {
            throw new StoreItemNotFoundInSystemException(itemId ,store.getName(),true );
        }
        boolean isInStore=(store.getItemsIds()).contains(itemId);
        if(!isInStore)
        {
            throw  new ItemInSaleNotFoundInStoreException(store.getName(),itemId);
        }
    }

//    private void InitializeCustomers(List<SDMCustomer> sdmCustomers) throws DoubleObjectIdInSystemException, DoubleObjectInCoordinateException, ValueOutOfRangeException {
//        int currId;
//        for (SDMCustomer customer : sdmCustomers) {
//            Customer myCustomer = new Customer(customer);
//
//            currId = myCustomer.getId();
//            if (customerIdToCustomer.containsKey(currId)) {
//                throw new DoubleObjectIdInSystemException("customers", currId);
//            }
//            Coordinate customerLocation=myCustomer.getLocation();
//
//            for (Store currStore:storeIdToStore.values()){
//                if(currStore.getLocation().equals(customerLocation))
//                {
//                    throw new DoubleObjectInCoordinateException("store "+currStore.getName(),
//                                                                "customer "+myCustomer.getName(),
//                                                                customerLocation);
//                }
//
//            }
//
//            for (Customer currCustomer:customerIdToCustomer.values()){
//                if(currCustomer.getLocation().equals(customerLocation))
//                {
//                    throw new DoubleObjectInCoordinateException("customer "+currCustomer.getName(),
//                            "customer "+myCustomer.getName(),
//                            customerLocation);
//                }
//            }
//            this.customerIdToCustomer.put(myCustomer.getId(), myCustomer);
//        }
//    }


    public void NotifyIfNotAllItemsInStores() throws ItemNotFoundInStoresException {
        for (Item currItem: itemIdToItems.values()) {
            if(currItem.getSellersNum()==0)
            {
                throw new ItemNotFoundInStoresException(currItem.getId());
            }
        }
    }

    public Set<StoreDto> getStoresDetails() {
        Set<StoreDto> storesInSystemDetails = new HashSet<>();
        for (Store currStore : storeIdToStore.values()) {
            StoreDto currStoreDetails= getStoreDetails(currStore.getId());
            storesInSystemDetails.add(currStoreDetails);
        }

        return storesInSystemDetails;
    }

    public StoreDto getStoreDetails(int storeId)
    {
        Store currStore=storeIdToStore.get(storeId);
        Set<Item> currStoreItems = getStoreItemsSet(currStore.getItemsIds());
        return currStore.getStoreDetails(currStoreItems,getStoreProfitFromDeliveries(currStore.getId()) ,getStoreOrdersSet(currStore.getId()));

    }

    public StoreDto getSpecificStoreDetails(int storeId)
    {
        Store currStore=storeIdToStore.get(storeId);
        Set<Item> currStoreItems = getStoreItemsSet(currStore.getItemsIds());
        return currStore.getStoreDetails(currStoreItems,getStoreProfitFromDeliveries(currStore.getId()) ,getStoreOrdersSet(currStore.getId()));
    }

    public double getStoreProfitFromDeliveries(int storeId)
    {
        Order currOrder;
        Store currStore=storeIdToStore.get(storeId);
        Set<Integer> storeOrdersIds=currStore.getOrderIds();
        double deliveriesProfit=0;
        for (Integer currOrderId:storeOrdersIds)
        {
            currOrder=orderIdToOrder.get(currOrderId);
            deliveriesProfit+=currStore.getDeliveryPrice(currOrder.getOrderLocation());
        }
        return deliveriesProfit;
    }


    public Set<ItemInSystemDto> getItemsDetails()
    {
        Set<ItemInSystemDto> itemsInSystemDetails = new HashSet<>();
        ItemInSystemDto currItemDetails;
        for (Item currItem : itemIdToItems.values())
        {
            currItemDetails=new ItemInSystemDto(currItem.getId(),
                            currItem.getName(),
                            currItem.getPurchaseCategory(),
                            currItem.getSellersNum(),
                            GetAvgPrice(currItem.getId()),
                            GetTotalItemPurchases(currItem.getId()));

            itemsInSystemDetails.add(currItemDetails);

        }
        return  itemsInSystemDetails;

    }

    public Set<Item> getStoreItemsSet(Set<Integer> ids)
    {
        Set<Item> storeItems=new HashSet<Item>();
        for (Integer CurrId :ids)
        {
            storeItems.add(itemIdToItems.get(CurrId)) ;
        }
        return  storeItems;
    }


    public  double GetAvgPrice(int itemId)
    {
        int totalPriceInAllStores=0;
        int sellersNum=0;
        Map<Integer, Sell> storePrices;
        for (Store currStore: storeIdToStore.values())
        {
            storePrices=currStore.getItemIdToItemSell();
            if (storePrices.containsKey(itemId))
            {
                totalPriceInAllStores +=storePrices.get(itemId).getPrice();
                sellersNum++;
            }
        }

        return (totalPriceInAllStores/ sellersNum);

    }

    public double GetTotalItemPurchases(int itemId)
    {
        double totalItemPurchasesInSystem=0;
        Collection<StoreOrder> orderStoreOrders;

        if(!orderIdToOrder.isEmpty()) // No orders in system (list has not been initialized)
        {
            for (Order currOrder : orderIdToOrder.values())
            {
                orderStoreOrders= currOrder.getStoreIdToStoreOrder().values();
                for(StoreOrder currStoreOrder: orderStoreOrders)
                {
                    totalItemPurchasesInSystem+=currStoreOrder.getOrderedItemPurchases(itemId);
                }
            }
        }

        return totalItemPurchasesInSystem;
    }


    public  boolean isValidStoreId(int id)
    {
        return (storeIdToStore.containsKey(id));
    }

    public boolean isItemExistInStore(int itemId, int storeId)
    {
        Store currStore= storeIdToStore.get(storeId);
        return (currStore.isItemIdExist(itemId));
    }

    @Override
    public boolean isItemExistInSystem(int itemId) {
        return (itemIdToItems.containsKey(itemId));
    }

    public String getStoreName(int storeId)
    {
        return (storeIdToStore.get(storeId).getName());
    }

   public boolean hasOneSeller(int itemId)
   {
       Item currItem=itemIdToItems.get(itemId);
       return  (currItem.getSellersNum() == 1);
   }

   public boolean isStoreHasOneItem(int storeId)
   {
       Store currStore=storeIdToStore.get(storeId);
       return (currStore.getItemIdToItemSell().size()==1);
   }

   public void deleteItemFromStore(int itemId , int storeId) throws DeleteItemFromItsOnlySellerException, DeleteStoreOnlyItemException {
       SaleDto saleOfItemDetails=null;
        if(isStoreHasOneItem(storeId))
        {
            throw new DeleteStoreOnlyItemException(itemId);
        }
        if (hasOneSeller(itemId))
        {
            throw  new DeleteItemFromItsOnlySellerException(itemId);
        }
       Item currItem= itemIdToItems.get(itemId);
       currItem.decreaseSellersNumByOne();

       Store currStore= storeIdToStore.get(storeId);
       currStore.deleteItem(itemId);
   }

    public void addItemToStore(int storeId,int itemId,double itemPrice )
    {
        Store currStore= storeIdToStore.get(storeId);
        currStore.addItem(itemId,itemPrice);

        Item currItem= itemIdToItems.get(itemId);
        currItem.increaseSellersNumByOne();
    }

    public void updateStoreItemPrice(int storeId, int itemId, double itemPrice )
    {
        Store currStore= storeIdToStore.get(storeId);
        currStore.UpdateItemPrice(itemId,itemPrice);
    }

    public boolean isValidCoordinate(int coordinateVal )
    {
        return (coordinateVal>=Coordinate.coordinateMinValue && coordinateVal<=Coordinate.coordinateMaxValue);
    }

    public  boolean isStoreExistHere(Coordinate location){
        Coordinate currLocation;
        for (Store currStore: storeIdToStore.values())
        {
            currLocation= currStore.getLocation();
            if(currLocation.equals(location))
            {
                return true;
            }
        }
        return false;
    }

    public double getStoreItemPrice(int storeId,int itemId)
    {
       Store currStore= storeIdToStore.get(storeId);
       if(!currStore.isItemIdExist(itemId))
       {
           return -1;
       }
       else
       {
           return currStore.getItemPrice(itemId);
       }
    }

        public double getDeliveryPriceToCustomer(int storeId,int customerId)
    {
//        Customer customer=customerIdToCustomer.get(customerId);
//        return getDeliveryPrice(storeId,customer.getLocation());
        return -1;
    }

    public double getDeliveryPrice(int storeId,Coordinate orderLocation)
    {
        Store currStore= storeIdToStore.get(storeId);

        return (currStore.getDeliveryPrice(orderLocation));
    }

    public double getDistanceFromStore(int storeId,Coordinate orderLocation)
    {
        Store currStore= storeIdToStore.get(storeId);

        return (currStore.getDistanceFromGivenLocation(orderLocation));
    }

    public  int getStorePPK(int storeId )
    {
        return (storeIdToStore.get(storeId).getDeliveryPpk());
    }


    public double getDeliveryPriceFromMultipleStores(Set<Integer> storesIds,Coordinate orderLocation)
    {
        double deliveryPrice=0;

        for (int storeId:storesIds)
        {
            deliveryPrice+=getDeliveryPrice(storeId,orderLocation);
        }
        return deliveryPrice;
    }

//    @Override
//    public Map<Integer, Map<Integer, Double>> getMinimalItemsBag(Map<Integer,Double> itemIdToAmount) {
//        Map<Integer, Map<Integer, Double>>  itemsBag=new HashMap<>();
//        double currPrice;
//        double minPrice;
//        int currMinStoreId =-1;
//        Map<Integer, Double> itemIdToAmountInStore;
//        for (Integer currItemId:itemIdToAmount.keySet())
//        {
//            minPrice=Double.MAX_VALUE;
//
//            for (Store currStore: storeIdToStore.values())
//            {
//                if(currStore.isItemIdExist(currItemId))
//                {
//                    currPrice=currStore.getItemPrice(currItemId);
//                    if(currPrice<minPrice)
//                    {
//                        minPrice=currPrice;
//                        currMinStoreId=currStore.getId();
//                    }
//                }
//            }
//            if (!itemsBag.containsKey(currMinStoreId))
//            {
//                itemIdToAmountInStore=new HashMap<>();
//            }
//            else
//            {
//                itemIdToAmountInStore=itemsBag.get(currMinStoreId);
//            }
//            itemIdToAmountInStore.put(currItemId,itemIdToAmount.get(currItemId));
//            itemsBag.put(currMinStoreId,itemIdToAmountInStore);
//        }
//
//        return  itemsBag;
//    }

    public Set<StoreOrderDto> getStoreOrderDetails(int storeId)
    {
        Order currOrder;
        StoreOrder currStoreOrder;
        StoreOrderDto currStoreOrderDto;
        Set<StoreOrderDto> storeOrdersDetails=new HashSet<>();
        Store currStore= storeIdToStore.get(storeId);
        Set<Integer> ordersFromStoreIds=currStore.getOrderIds();
        for (Integer currOrderId:ordersFromStoreIds)
        {
            currOrder=orderIdToOrder.get(currOrderId);
            currStoreOrderDto=getStoreOrderDetails(currOrder,storeId);
            storeOrdersDetails.add(currStoreOrderDto);
        }
        return storeOrdersDetails;
    }

    public StoreOrderDto getStoreOrderDetails(Order order,int storeId)
    {
        StoreOrder storeOrder=order.getStoreIdToStoreOrder().get(storeId);
        boolean isDynamicOredr=false;
        if(order.isDynamicOrder)
        {
            isDynamicOredr=true;
        }
        Coordinate currCustomerLocation=order.getOrderLocation();


        Set<ItemInStoreOrderDto> itemsInStoreDetails=storeOrder.getItemsInStoreOrderDetails(itemIdToItems);
        return new StoreOrderDto(order.getDate(),
                storeOrder.getAmountOfOrderedItemsByUnits(this.itemIdToItems),
                storeOrder.getItemsTotalPrice()
                ,storeOrder.getDeliveryPrice(currCustomerLocation)
                ,storeOrder.getTotalPrice(currCustomerLocation),
                isDynamicOredr,
                order.getId(),
                itemsInStoreDetails,
                storeOrder.getDistanceFromCustomer(currCustomerLocation));
    }

    public Set<OrderDto> getOrdersDetails()
    {
        Set<OrderDto> ordersInSystemDetails=new HashSet<>();
        OrderDto currOrderDetails;
        for (Order currOrder: orderIdToOrder.values())
        {
            Map<Integer,StoreOrderDto> StoreIdToStoreOrderDto = new HashMap<>();
            for (Integer currStoreId:currOrder.getStoreIdToStoreOrder().keySet())
            {
                StoreOrderDto currStoreOrderDetails=getStoreOrderDetails(currOrder,currStoreId);
                StoreIdToStoreOrderDto.put(currStoreId,currStoreOrderDetails);
            }
            currOrderDetails=new OrderDto(currOrder.getDate(),
                                            currOrder.getAmountOfOrderedItemsByUits(this.itemIdToItems),
                                            currOrder.getItemsInOrderPrice(),
                                            currOrder.getOrderDeliveryPrice(),
                                            currOrder.getOrderTotalPrice(),
                                            currOrder.getId(),
                                            currOrder.getAmountOfOrderedItemsTypes(),
                                            StoreIdToStoreOrderDto);

//           if(currOrder.getOrderType()== OrderTypes.DYNAMIC)
//           {
//               currOrderDetails=new DynamicOrderDto(currOrder.getId()
//                                            ,currOrder.getDate()
//                                            ,currOrder.getAmountOfOrderedItemsByUits()
//                                            ,currOrder.getItemsInOrderPrice()
//                                            ,currOrder.getOrderDeliveryPrice()
//                                            ,currOrder.getOrderTotalPrice()
//                                            ,currOrder.getAmountOfOrderedItemsTypes()
//                                            ,currOrder.getStoresInOrderAmount());
//           }
//           else
//           {
//               currOrderDetails=new StaticOrderDto(currOrder.getId()
//                       ,currOrder.getDate()
//                       ,currOrder.getAmountOfOrderedItemsByUits()
//                       ,currOrder.getItemsInOrderPrice()
//                       ,currOrder.getOrderDeliveryPrice()
//                       ,currOrder.getOrderTotalPrice()
//                       ,currOrder.getAmountOfOrderedItemsTypes()
//                       ,currOrder.getOneStoreInOrder().getId()
//                       ,currOrder.getOneStoreInOrder().getName());
//
//           }

            ordersInSystemDetails.add(currOrderDetails);
        }
        return ordersInSystemDetails;
    }

    public PurchaseCategory getItemPurchaseCategory(int itemId)
    {
        return (itemIdToItems.get(itemId).getPurchaseCategory());
    }

    public Order saveBaseOrder(LocalDate orderDate,
                               boolean isDynamicOrder,
                               Customer customer)
    {
//        return new Order(orderDate,isDynamicOrder,customer);
        return null;
    }

    public void saveOrder(LocalDate orderDate,
                          Customer currCustomer,
                          boolean isDynamicOrder,
                          Map<Integer,Map<Integer,Double>> dynamicStoreIdToOrderedItem,
                          Map<Integer, Map<OfferDto,Integer>> storeIdToItemsToOrderFromSales)
    {
//        Customer currCustomer= (Customer) userIdToUser.get(customerId);
        Order currOrder= saveBaseOrder(orderDate,isDynamicOrder,currCustomer);
//        Map<ItemDto,Double> itemToOrderFromOneStoreToItemAmount=new HashMap<>();
//        Map<OfferDto,Integer> ItemsToOrderFromSalesFromOneStoreToSalesAmount;

        for (Integer currStoreId:dynamicStoreIdToOrderedItem.keySet())
        {
            Map<OfferDto,Integer> itemsFromSalesInStore;
            if(!storeIdToItemsToOrderFromSales.containsKey(currStoreId))
            {
                itemsFromSalesInStore=null;
            }
            else
            {
                itemsFromSalesInStore=storeIdToItemsToOrderFromSales.get(currStoreId);
            }
            saveStoreOrder(currStoreId,currOrder,dynamicStoreIdToOrderedItem.get(currStoreId),itemsFromSalesInStore);
        }
        orderIdToOrder.put(currOrder.getId(),currOrder);
    }

//    public void saveStaticOrder(Date orderDate,
//                                OrderTypes orderType,
//                                Map<Integer,Double> itemIdToItemAmount,
//                                int storeId,
//                                Customer customer)
//    {
//        Order currOrder= saveBaseOrder(orderDate,orderType,customer);
//        saveStoreOrder(storeId,currOrder,itemIdToItemAmount);
//        orderIdToOrder.put(currOrder.getId(),currOrder);
//    }

    public void saveStoreOrder(int storeId ,
                               Order currOrder ,
                               Map<Integer,Double> itemIdToItemAmount,
                               Map<OfferDto,Integer> ItemsToOrderFromSalesToSalesAmount)
    {
        Store currStore=storeIdToStore.get(storeId);
        currStore.addStoreOrder(currOrder.getId());
        StoreOrder currStoreOrder=new StoreOrder(currStore,itemIdToItemAmount,ItemsToOrderFromSalesToSalesAmount);
        currOrder.addStoreOrder(storeId,currStoreOrder);
    }


    public Set<StoreOrder> getStoreOrdersSet(int storeId)
    {
        Order currOrder;
        Set<StoreOrder> storeOrders=new HashSet<>();
        Set<Integer> ordersFromStoreIds=storeIdToStore.get(storeId).getOrderIds();
        for (Integer currOrderFromStoreId: ordersFromStoreIds)
        {
            currOrder=orderIdToOrder.get(currOrderFromStoreId);
            storeOrders.add(currOrder.getStoreIdToStoreOrder().get(storeId));
        }
        return storeOrders;
    }


    public Set<ItemInStoreDto> getStoreItemsDetails(int storeId)
    {
        Store currStore= storeIdToStore.get(storeId);
        return  currStore.getStoreItemsDetails(getStoreItemsSet(currStore.getItemsIds()) ,getStoreOrdersSet(storeId) );
    }

//    @Override
//    public Set<CustomerDto> getCustomersDetails() {
//
//        Set<CustomerDto> customerDetails=new HashSet<>();
//        CustomerDto currCustomerDetails;
//       for (Customer currCustomer: customerIdToCustomer.values())
//       {
//
//           currCustomerDetails=getCustomerDetails(currCustomer);
//           customerDetails.add(currCustomerDetails);
//       }
//       return customerDetails;
//
//    }

//    @Override
//    public CustomerDto getCustomerDetails(int customerId) {
//
//        Customer currCustomer=customerIdToCustomer.get(customerId);
//        return getCustomerDetails(currCustomer);
//    }

//    private CustomerDto getCustomerDetails(Customer customer)
//    {
//        return new CustomerDto(customer.getId(),
//                customer.getName(),
//                customer.orderIds.size(),
//                getAvgCustomerOrderPrice(customer),
//                getAvgCustomerDeliveriesPrice(customer),
//                customer.getLocation().getX(),
//                customer.getLocation().getY());
//    }

    private double getAvgCustomerOrderPrice(Customer customer)
    {
        Set<Integer> customerOrdersIds=customer.getOrderIds();
        Order currOrder;
        double itemsInOrdersTotalPrice = 0, returnVal = 0;

        if(customerOrdersIds.size() != 0) {
            for (Integer oredrId : customerOrdersIds) {
                currOrder = orderIdToOrder.get(oredrId);
                itemsInOrdersTotalPrice += currOrder.getItemsInOrderPrice();
            }
            returnVal = itemsInOrdersTotalPrice /customerOrdersIds.size();
        }

        return returnVal;
    }

    private double getAvgCustomerDeliveriesPrice(Customer customer)
    {
        Set<Integer> customerOrdersIds=customer.getOrderIds();
        Order currOrder;
        double deliveriesInOrdersTotalPrice = 0, returnVal = 0;

        if(customerOrdersIds.size() != 0) {
            for (Integer oredrId:customerOrdersIds)
            {
                currOrder=orderIdToOrder.get(oredrId);
                deliveriesInOrdersTotalPrice+=currOrder.getOrderDeliveryPrice();
            }
            returnVal = deliveriesInOrdersTotalPrice /customerOrdersIds.size();
        }

        return returnVal;
    }
//
//    public Set<OrderDto> getOrdersDetails ()
//    {
//        Set<OrderDto> ordersDetails=new HashSet<>();
//        OrderDto currOrderDetails;
//        if(!orderIdToOrder.isEmpty()) {
//            for (Order currOrder : orderIdToOrder.values()) {
//                if (currOrder.getOrderType() == OrderTypes.DYNAMIC) {
//                    currOrderDetails = new DynamicOrderDto(currOrder.getId(),
//                            currOrder.getDate(),
//                            currOrder.getAmountOfOrderedItemsByUits(),
//                            currOrder.getItemsInOrderPrice(),
//                            currOrder.getOrderDeliveryPrice(),
//                            currOrder.getOrderTotalPrice(),
//                            currOrder.getAmountOfOrderedItemsTypes()
//                            , currOrder.getStoresInOrderAmount());
//                } else {
//                    currOrderDetails = new StaticOrderDto(currOrder.getId(),
//                            currOrder.getDate(),
//                            currOrder.getAmountOfOrderedItemsByUits(),
//                            currOrder.getItemsInOrderPrice(),
//                            currOrder.getOrderDeliveryPrice(),
//                            currOrder.getOrderTotalPrice(),
//                            currOrder.getAmountOfOrderedItemsTypes(),
//                            currOrder.getOneStoreInOrder().getId(),
//                            currOrder.getOneStoreInOrder().getName());
//                }
//                ordersDetails.add(currOrderDetails);
//            }
//        }
//        return ordersDetails;
//    }

    public void readOrdersHistoryFromFile(String filePath) throws IOException {
        // Read the array list  from the file

        ObjectInputStream in =new ObjectInputStream(new FileInputStream(filePath));
        Map<Integer,Order> orderIdToOrderInHistory = null;
        try {
            orderIdToOrderInHistory = (Map<Integer, Order>)in.readObject();
        } catch (ClassNotFoundException e) {
            orderIdToOrderInHistory =new HashMap<>();
        }

        orderIdToOrder=orderIdToOrderInHistory;

        //update next id in Order class
        Integer maxId= Collections.max(orderIdToOrderInHistory.keySet());
        Order.setNextId(maxId);

        saveOrdersIdToStores();
    }

    private void saveOrdersIdToStores()
    {
        Store currStore;
        for (Order currOrder :orderIdToOrder.values())
        {
            Set<Integer> storesInOrderIds=currOrder.getStoreIdToStoreOrder().keySet();
            for (Integer currStoreId:storesInOrderIds)
            {
                currStore=storeIdToStore.get(currStoreId);
                currStore.addStoreOrder(currOrder.getId());
            }
        }
    }

    public void writeOrderHistoryToFile(String filePath) throws IOException {
        ObjectOutputStream out =new ObjectOutputStream(new FileOutputStream(filePath));
        out.writeObject(orderIdToOrder);
        out.flush();

        }

        public ItemDto getItemDetails(int itemId)
        {
            Item item=itemIdToItems.get(itemId);
            return  new ItemDto(item.getId(),item.getName(),item.getPurchaseCategory());
        }

        public  Set<ItemInSystemDto> getItemsInSystemNotInStore(int storeId)
        {
            Set<ItemInSystemDto> itemsInSystem=getItemsDetails();
            Set<ItemInSystemDto> itemsInSystemNotInStore=new HashSet<>();

            Store currStore=storeIdToStore.get(storeId);
            for (ItemInSystemDto currItem:itemsInSystem)
            {
                if(!currStore.isItemInStore(currItem.getId()))
                {
                    itemsInSystemNotInStore.add(currItem);
                }
            }
            return itemsInSystemNotInStore;
        }

        public boolean isItemInStoreInSale(int itemId,int storeId)
        {
            Store currStore=storeIdToStore.get(storeId);
            return currStore.isItemInSale(itemId);
        }

//        public Set<StoreInCalcDyanmicOrderDto> getStoresInCalcDynamicOrderdetails(Map<Integer, Map<Integer, Double>> minimalItemsBag,)
//        {
//            Set<StoreInCalcDyanmicOrderDto> details=new HashSet<>();
//            StoreInCalcDyanmicOrderDto currStoreDetails;
//
//            for (Integer storeId : minimalItemsBag)
//            {
//                Store currStore=storeIdToStore.get(storeId);
//                currStoreDetails=new StoreInCalcDyanmicOrderDto(storeId,
//                                                                currStore.getName(),
//                        currStore.getLocation().getX(),
//                        currStore.getLocation().getY(),
//                        currStore.get)
//            }
//        }

//    public Set<SaleDto>

    public Map<SaleDto,Integer> getStoreSalesInOrder(int storeId , Map<Integer,Double> itemIdToItemAmount)
    {
        Store currStore=storeIdToStore.get(storeId);
        return currStore.getSalesInOrderDetails(itemIdToItemAmount);
    }

    public int getItemCheapestSellerId(int itemId)
    {
        double currPrice;
        int currMinStoreId =-1;
        double minPrice=Double.MAX_VALUE;

        for (Store currStore: storeIdToStore.values())
        {
            if(currStore.isItemIdExist(itemId))
            {
                currPrice=currStore.getItemPrice(itemId);
                if(currPrice<minPrice)
                {
                    minPrice=currPrice;
                    currMinStoreId=currStore.getId();
                }
            }
        }

        return currMinStoreId;
    }

    public Set<StoreInCalcDyanmicOrderDto>  getStoresInDynamicOrderDetails(Map<Integer, Map<Integer, Double>> itemsBag ,int customerId)
    {
//
//        Set<StoreInCalcDyanmicOrderDto> storesInDynamicOrderDetails=new HashSet<>();
//        Coordinate customerLocation=customerIdToCustomer.get(customerId).getLocation();
//        StoreInCalcDyanmicOrderDto currStoreInDynamicOrderDetails;
//        for (Integer storeId:itemsBag.keySet())
//        {
//            Store currStore=storeIdToStore.get(storeId);
//
//            currStoreInDynamicOrderDetails=new StoreInCalcDyanmicOrderDto(currStore.getId(),
//                                                                            currStore.getName(),
//                                                                            currStore.getLocation().getX(),
//                                                                             currStore.getLocation().getY(),
//                                                                            currStore.getDistanceFromGivenLocation(customerLocation),
//                                                                            currStore.getDeliveryPpk(),
//                                                                            currStore.getDeliveryPrice(customerLocation),
//                                                                            itemsBag.get(storeId).size(),
//                                                                            currStore.getWantedItemsTotalPrice(itemsBag.get(storeId)));
//
//            storesInDynamicOrderDetails.add(currStoreInDynamicOrderDetails);
//        }
//
//        return storesInDynamicOrderDetails;
        return null;
    }

public Set<ItemInStoreOrderDto> getWantedItemsInStoreDetails(int storeId,Map<Integer, Double> itemsToOrderRegular,Map<OfferDto,Integer> itemsToOrderFromSale)
{
    Set<ItemInStoreOrderDto> wantedItemsDetails=new HashSet<>();
    setRegularItemsToOrderDetails(storeId,itemsToOrderRegular,wantedItemsDetails);
    setItemsFromSaleToOrderDetails(storeId,itemsToOrderFromSale,wantedItemsDetails);
    return wantedItemsDetails;
}


    private void setRegularItemsToOrderDetails(int storeId,Map<Integer, Double> itemsToOrderRegular,Set<ItemInStoreOrderDto> wantedItemsDetails)
{
    ItemInStoreOrderDto currItemToOrderRegular;
    Item currItem;
    for (Integer currItemId:itemsToOrderRegular.keySet())
    {
        currItem=itemIdToItems.get(currItemId);
        double itemAmountToOrder= itemsToOrderRegular.get(currItemId);
        double itemPriceInStore=storeIdToStore.get(storeId).getItemPrice(currItemId);
        currItemToOrderRegular=new ItemInStoreOrderDto(currItemId,
                currItem.getName(),
                currItem.getPurchaseCategory(),
                itemAmountToOrder,
                itemPriceInStore,
                itemAmountToOrder*itemPriceInStore,
                false

        );
        wantedItemsDetails.add(currItemToOrderRegular);
    }
}

    private void setItemsFromSaleToOrderDetails(int storeId,Map<OfferDto,Integer> itemsToOrderFromSale,Set<ItemInStoreOrderDto> wantedItemsDetails)
    {
        ItemInStoreOrderDto currItemToOrderFromSale;
        Item currItem;
        if(itemsToOrderFromSale!=null )
        {
            for (OfferDto currOffer:itemsToOrderFromSale.keySet())
            {

                currItem=itemIdToItems.get(currOffer.getItemId());
                int timesOfOfferUses=itemsToOrderFromSale.get(currOffer);
                double itemQuantity=currOffer.getQuantity()*timesOfOfferUses;

                currItemToOrderFromSale=new ItemInStoreOrderDto(currItem.getId(),
                        currItem.getName(),
                        currItem.getPurchaseCategory(),
                        itemQuantity ,
                        currOffer.getForAdditional(),
                        itemQuantity*currOffer.getForAdditional(),
                        true);
                wantedItemsDetails.add(currItemToOrderFromSale);
            }
        }
    }

    @Override
    public double getStoreDistanceFromCustomer(int storeId, int customerId) {
//        Store currStore=storeIdToStore.get(storeId);
//        Customer customer=customerIdToCustomer.get(customerId);
//        Coordinate customerLocation=customer.getLocation();
//
//        return currStore.getDistanceFromGivenLocation(customerLocation);
        return -1;
    }

    public double getStoreDeliveryCostToCustomer(int storeId , int customerId)
    {
//        Store currStore=storeIdToStore.get(storeId);
//        Customer customer=customerIdToCustomer.get(customerId);
//        return currStore.getDeliveryPrice(customer.getLocation());
        return -1;
    }



//    private void addItems(Map<Integer,Item> itemidToItemToAdd)
//    {
//        this.itemIdToItems.putAll(itemidToItemToAdd);
//    }
//    private void addStores(Map<Integer,Store> storeidToStoreToAdd)
//    {
//        this.storeIdToStore.putAll(storeidToStoreToAdd);
//    }

//    public void addDataFromFile(Map<Integer,Store> storeidToStoreToAdd,Map<Integer,Item> itemidToItemToAdd)
//    {
//        addStores(storeidToStoreToAdd);
//        addItems(itemidToItemToAdd);
//    }


    private static SuperDuperMarketDescriptor deserializeFrom(InputStream in) throws JAXBException {
        JAXBContext jc = JAXBContext.newInstance("generatedClassesJaxb");
        Unmarshaller u = jc.createUnmarshaller();
        return (SuperDuperMarketDescriptor) u.unmarshal(in);
    }

        private static String getFileExtension(String filePath)
    {

        int lastIndexOf = filePath.lastIndexOf('.');
        if (lastIndexOf == -1) {
            return "";  // Empty extension
        }
        return filePath.substring(lastIndexOf+1).toLowerCase();
    }


    public String getRegionName() {
        return regionName;
    }

    public void setRegionName(String regionName) {
        this.regionName = regionName;
    }

    public Owner getRegionOwner() {
        return regionOwner;
    }

    public void setRegionOwner(Owner regionOwner) {
        this.regionOwner = regionOwner;
    }

    public int getItemsTypesAmount()
    {
        return itemIdToItems.size();
    }

    public int getStoresAmount()
    {
        return storeIdToStore.size();
    }

    public int getOrdersAmount()
    {
        return orderIdToOrder.size();
    }

    public double getAvgOrderPrice()
    {
        double avgPrice=0;
        if(!orderIdToOrder.isEmpty())
        {
            int ordersCounter=0;
            double OrdersPrice=0;
            for (Order currOrder:orderIdToOrder.values())
            {
                OrdersPrice+=currOrder.getOrderTotalPrice();
                ordersCounter++;
            }
            avgPrice=OrdersPrice/ordersCounter;
        }
        return  avgPrice;

    }

}